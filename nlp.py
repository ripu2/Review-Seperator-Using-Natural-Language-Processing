# -*- coding: utf-8 -*-
"""NLP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TDp4iQnhoXN4MElmdUm5aDhc-hBoa6t_
"""

import pandas as pd 
from google.colab import files
dataset=files.upload()

import io
dataset=pd.read_csv(io.BytesIO(dataset['Restaurant_Reviews.tsv']),sep='\t')

"""***Cleaning the text***"""

import re
import nltk #for removing non relecent words
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
counter=0
for i in  range(0, 1000): #for complete dataset
  review= re.sub('[^a-zA-Z]',' ',dataset['Review'][i]) #removing unnecessary element
  review= review.lower() #converting into lowercase
  review= review.split()#removing non relevent words
  ps=PorterStemmer()#steaming
  review= [ps.stem(word) for word in review if not word in set(stopwords.words('english'))] #steaming and removing only english non relevent word
  review= ' '.join(review)
  corpus.append(review)
  counter=counter+1
counter=counter-1

"""***Bag of words models***"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features= 1500)
X= cv.fit_transform(corpus).toarray()
y = dataset.iloc[:,1].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=0)
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

fb= input(" Enter your reviews ")
review= re.sub('[^a-zA-Z]',' ',fb) #removing unnecessary element
review= review.lower() #converting into lowercase
review= review.split()#removing non relevent words
ps=PorterStemmer()#steaming
review= [ps.stem(word) for word in review if not word in set(stopwords.words('english'))] #steaming and removing only english non relevent word
review= ' '.join(review)
corpus.append(review)
counter=counter+1

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features= 1500)
X= cv.fit_transform(corpus).toarray() 
X=pd.DataFrame(X)

output = classifier.predict(X.iloc[[counter]])
if output== [1]:
  print('positive Review')
else:
  print('Negative Review')